// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Navbar should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Navbar />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Menu>
        <MenuItem
          header={true}
          href="/"
        >
          Dashboard
        </MenuItem>
        <Dropdown
          additionLabel="Add "
          additionPosition="top"
          closeOnBlur={true}
          deburr={false}
          icon="dropdown"
          item={true}
          minCharacters={1}
          noResultsMessage="No results found."
          openOnFocus={true}
          renderLabel={[Function]}
          searchInput="text"
          selectOnBlur={true}
          selectOnNavigation={true}
          text="Learning Paths"
          wrapSelection={true}
        >
          <DropdownMenu>
            <NavigationLearningPath />
          </DropdownMenu>
        </Dropdown>
        <MenuItem>
          <Form
            action="/search"
            as="form"
            method="GET"
          >
            <FormGroup
              inline={true}
            >
              <FormInput
                as={[Function]}
                control={[Function]}
                icon="search"
                name="searchTerm"
                placeholder="Search"
              />
              <FormButton
                as={[Function]}
                control={[Function]}
                type="submit"
              >
                Submit
              </FormButton>
            </FormGroup>
          </Form>
        </MenuItem>
      </Menu>,
      "className": "navbar",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <MenuItem
            header={true}
            href="/"
          >
            Dashboard
          </MenuItem>,
          <Dropdown
            additionLabel="Add "
            additionPosition="top"
            closeOnBlur={true}
            deburr={false}
            icon="dropdown"
            item={true}
            minCharacters={1}
            noResultsMessage="No results found."
            openOnFocus={true}
            renderLabel={[Function]}
            searchInput="text"
            selectOnBlur={true}
            selectOnNavigation={true}
            text="Learning Paths"
            wrapSelection={true}
          >
            <DropdownMenu>
              <NavigationLearningPath />
            </DropdownMenu>
          </Dropdown>,
          <MenuItem>
            <Form
              action="/search"
              as="form"
              method="GET"
            >
              <FormGroup
                inline={true}
              >
                <FormInput
                  as={[Function]}
                  control={[Function]}
                  icon="search"
                  name="searchTerm"
                  placeholder="Search"
                />
                <FormButton
                  as={[Function]}
                  control={[Function]}
                  type="submit"
                >
                  Submit
                </FormButton>
              </FormGroup>
            </Form>
          </MenuItem>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Dashboard",
            "header": true,
            "href": "/",
          },
          "ref": null,
          "rendered": "Dashboard",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "additionLabel": "Add ",
            "additionPosition": "top",
            "children": <DropdownMenu>
              <NavigationLearningPath />
            </DropdownMenu>,
            "closeOnBlur": true,
            "deburr": false,
            "icon": "dropdown",
            "item": true,
            "minCharacters": 1,
            "noResultsMessage": "No results found.",
            "openOnFocus": true,
            "renderLabel": [Function],
            "searchInput": "text",
            "selectOnBlur": true,
            "selectOnNavigation": true,
            "text": "Learning Paths",
            "wrapSelection": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <NavigationLearningPath />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Form
              action="/search"
              as="form"
              method="GET"
            >
              <FormGroup
                inline={true}
              >
                <FormInput
                  as={[Function]}
                  control={[Function]}
                  icon="search"
                  name="searchTerm"
                  placeholder="Search"
                />
                <FormButton
                  as={[Function]}
                  control={[Function]}
                  type="submit"
                >
                  Submit
                </FormButton>
              </FormGroup>
            </Form>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "action": "/search",
              "as": "form",
              "children": <FormGroup
                inline={true}
              >
                <FormInput
                  as={[Function]}
                  control={[Function]}
                  icon="search"
                  name="searchTerm"
                  placeholder="Search"
                />
                <FormButton
                  as={[Function]}
                  control={[Function]}
                  type="submit"
                >
                  Submit
                </FormButton>
              </FormGroup>,
              "method": "GET",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <FormInput
                    as={[Function]}
                    control={[Function]}
                    icon="search"
                    name="searchTerm"
                    placeholder="Search"
                  />,
                  <FormButton
                    as={[Function]}
                    control={[Function]}
                    type="submit"
                  >
                    Submit
                  </FormButton>,
                ],
                "inline": true,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "as": [Function],
                    "control": [Function],
                    "icon": "search",
                    "name": "searchTerm",
                    "placeholder": "Search",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "as": [Function],
                    "children": "Submit",
                    "control": [Function],
                    "type": "submit",
                  },
                  "ref": null,
                  "rendered": "Submit",
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Menu>
          <MenuItem
            header={true}
            href="/"
          >
            Dashboard
          </MenuItem>
          <Dropdown
            additionLabel="Add "
            additionPosition="top"
            closeOnBlur={true}
            deburr={false}
            icon="dropdown"
            item={true}
            minCharacters={1}
            noResultsMessage="No results found."
            openOnFocus={true}
            renderLabel={[Function]}
            searchInput="text"
            selectOnBlur={true}
            selectOnNavigation={true}
            text="Learning Paths"
            wrapSelection={true}
          >
            <DropdownMenu>
              <NavigationLearningPath />
            </DropdownMenu>
          </Dropdown>
          <MenuItem>
            <Form
              action="/search"
              as="form"
              method="GET"
            >
              <FormGroup
                inline={true}
              >
                <FormInput
                  as={[Function]}
                  control={[Function]}
                  icon="search"
                  name="searchTerm"
                  placeholder="Search"
                />
                <FormButton
                  as={[Function]}
                  control={[Function]}
                  type="submit"
                >
                  Submit
                </FormButton>
              </FormGroup>
            </Form>
          </MenuItem>
        </Menu>,
        "className": "navbar",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <MenuItem
              header={true}
              href="/"
            >
              Dashboard
            </MenuItem>,
            <Dropdown
              additionLabel="Add "
              additionPosition="top"
              closeOnBlur={true}
              deburr={false}
              icon="dropdown"
              item={true}
              minCharacters={1}
              noResultsMessage="No results found."
              openOnFocus={true}
              renderLabel={[Function]}
              searchInput="text"
              selectOnBlur={true}
              selectOnNavigation={true}
              text="Learning Paths"
              wrapSelection={true}
            >
              <DropdownMenu>
                <NavigationLearningPath />
              </DropdownMenu>
            </Dropdown>,
            <MenuItem>
              <Form
                action="/search"
                as="form"
                method="GET"
              >
                <FormGroup
                  inline={true}
                >
                  <FormInput
                    as={[Function]}
                    control={[Function]}
                    icon="search"
                    name="searchTerm"
                    placeholder="Search"
                  />
                  <FormButton
                    as={[Function]}
                    control={[Function]}
                    type="submit"
                  >
                    Submit
                  </FormButton>
                </FormGroup>
              </Form>
            </MenuItem>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Dashboard",
              "header": true,
              "href": "/",
            },
            "ref": null,
            "rendered": "Dashboard",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "additionLabel": "Add ",
              "additionPosition": "top",
              "children": <DropdownMenu>
                <NavigationLearningPath />
              </DropdownMenu>,
              "closeOnBlur": true,
              "deburr": false,
              "icon": "dropdown",
              "item": true,
              "minCharacters": 1,
              "noResultsMessage": "No results found.",
              "openOnFocus": true,
              "renderLabel": [Function],
              "searchInput": "text",
              "selectOnBlur": true,
              "selectOnNavigation": true,
              "text": "Learning Paths",
              "wrapSelection": true,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <NavigationLearningPath />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Form
                action="/search"
                as="form"
                method="GET"
              >
                <FormGroup
                  inline={true}
                >
                  <FormInput
                    as={[Function]}
                    control={[Function]}
                    icon="search"
                    name="searchTerm"
                    placeholder="Search"
                  />
                  <FormButton
                    as={[Function]}
                    control={[Function]}
                    type="submit"
                  >
                    Submit
                  </FormButton>
                </FormGroup>
              </Form>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "action": "/search",
                "as": "form",
                "children": <FormGroup
                  inline={true}
                >
                  <FormInput
                    as={[Function]}
                    control={[Function]}
                    icon="search"
                    name="searchTerm"
                    placeholder="Search"
                  />
                  <FormButton
                    as={[Function]}
                    control={[Function]}
                    type="submit"
                  >
                    Submit
                  </FormButton>
                </FormGroup>,
                "method": "GET",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <FormInput
                      as={[Function]}
                      control={[Function]}
                      icon="search"
                      name="searchTerm"
                      placeholder="Search"
                    />,
                    <FormButton
                      as={[Function]}
                      control={[Function]}
                      type="submit"
                    >
                      Submit
                    </FormButton>,
                  ],
                  "inline": true,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "as": [Function],
                      "control": [Function],
                      "icon": "search",
                      "name": "searchTerm",
                      "placeholder": "Search",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "as": [Function],
                      "children": "Submit",
                      "control": [Function],
                      "type": "submit",
                    },
                    "ref": null,
                    "rendered": "Submit",
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
