// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NavigationLearningEvent should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NavigationLearningEvent />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "additionLabel": "Add ",
      "additionPosition": "top",
      "as": [Function],
      "children": <DropdownMenu>
        this.state.learningEvents.map(event =&gt;
        <NavigationLearningEventItem
          name="TODO"
          path="/"
        />
        )
      </DropdownMenu>,
      "closeOnBlur": true,
      "deburr": false,
      "icon": "dropdown",
      "item": true,
      "minCharacters": 1,
      "noResultsMessage": "No results found.",
      "openOnFocus": true,
      "renderLabel": [Function],
      "searchInput": "text",
      "selectOnBlur": true,
      "selectOnNavigation": true,
      "text": undefined,
      "to": undefined,
      "wrapSelection": true,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          "this.state.learningEvents.map(event =>",
          <NavigationLearningEventItem
            name="TODO"
            path="/"
          />,
          ")",
        ],
      },
      "ref": null,
      "rendered": Array [
        "this.state.learningEvents.map(event =>",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "name": "TODO",
            "path": "/",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        ")",
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "additionLabel": "Add ",
        "additionPosition": "top",
        "as": [Function],
        "children": <DropdownMenu>
          this.state.learningEvents.map(event =&gt;
          <NavigationLearningEventItem
            name="TODO"
            path="/"
          />
          )
        </DropdownMenu>,
        "closeOnBlur": true,
        "deburr": false,
        "icon": "dropdown",
        "item": true,
        "minCharacters": 1,
        "noResultsMessage": "No results found.",
        "openOnFocus": true,
        "renderLabel": [Function],
        "searchInput": "text",
        "selectOnBlur": true,
        "selectOnNavigation": true,
        "text": undefined,
        "to": undefined,
        "wrapSelection": true,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            "this.state.learningEvents.map(event =>",
            <NavigationLearningEventItem
              name="TODO"
              path="/"
            />,
            ")",
          ],
        },
        "ref": null,
        "rendered": Array [
          "this.state.learningEvents.map(event =>",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "name": "TODO",
              "path": "/",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          ")",
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
