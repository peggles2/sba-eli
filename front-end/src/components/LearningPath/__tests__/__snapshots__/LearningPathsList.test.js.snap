// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LearningPathsList should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LearningPathsList
    dispatch={[Function]}
    learningPaths={
      Array [
        Object {
          "id": 1,
          "name": "Course 1",
        },
        Object {
          "id": 2,
          "name": "Course 2",
        },
        Object {
          "id": 3,
          "name": "Course 3",
        },
        Object {
          "id": 4,
          "name": "Course 4",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <CardGroup>
        <Connect(withRouter(LearningPathsItem))
          id={1}
          name="Course 1"
        />
        <Connect(withRouter(LearningPathsItem))
          id={2}
          name="Course 2"
        />
        <Connect(withRouter(LearningPathsItem))
          id={3}
          name="Course 3"
        />
        <Connect(withRouter(LearningPathsItem))
          id={4}
          name="Course 4"
        />
      </CardGroup>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Connect(withRouter(LearningPathsItem))
            id={1}
            name="Course 1"
          />,
          <Connect(withRouter(LearningPathsItem))
            id={2}
            name="Course 2"
          />,
          <Connect(withRouter(LearningPathsItem))
            id={3}
            name="Course 3"
          />,
          <Connect(withRouter(LearningPathsItem))
            id={4}
            name="Course 4"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "class",
          "props": Object {
            "course_code": undefined,
            "id": 1,
            "name": "Course 1",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "2",
          "nodeType": "class",
          "props": Object {
            "course_code": undefined,
            "id": 2,
            "name": "Course 2",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "3",
          "nodeType": "class",
          "props": Object {
            "course_code": undefined,
            "id": 3,
            "name": "Course 3",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "4",
          "nodeType": "class",
          "props": Object {
            "course_code": undefined,
            "id": 4,
            "name": "Course 4",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <CardGroup>
          <Connect(withRouter(LearningPathsItem))
            id={1}
            name="Course 1"
          />
          <Connect(withRouter(LearningPathsItem))
            id={2}
            name="Course 2"
          />
          <Connect(withRouter(LearningPathsItem))
            id={3}
            name="Course 3"
          />
          <Connect(withRouter(LearningPathsItem))
            id={4}
            name="Course 4"
          />
        </CardGroup>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Connect(withRouter(LearningPathsItem))
              id={1}
              name="Course 1"
            />,
            <Connect(withRouter(LearningPathsItem))
              id={2}
              name="Course 2"
            />,
            <Connect(withRouter(LearningPathsItem))
              id={3}
              name="Course 3"
            />,
            <Connect(withRouter(LearningPathsItem))
              id={4}
              name="Course 4"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "class",
            "props": Object {
              "course_code": undefined,
              "id": 1,
              "name": "Course 1",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "class",
            "props": Object {
              "course_code": undefined,
              "id": 2,
              "name": "Course 2",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "3",
            "nodeType": "class",
            "props": Object {
              "course_code": undefined,
              "id": 3,
              "name": "Course 3",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "4",
            "nodeType": "class",
            "props": Object {
              "course_code": undefined,
              "id": 4,
              "name": "Course 4",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
