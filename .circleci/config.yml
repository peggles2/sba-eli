version: 2.1

orbs:
  slack: circleci/slack@1.0.0

jobs:
  check_for_secrets:
    docker:
      - image: circleci/python
    working_directory: ~/repo
    steps:
      - checkout
      - run: pip install --user truffleHog
      - run: /home/circleci/.local/bin/trufflehog --since_commit 65cd594d64625ba2a0fc316d37bd1e6eef738877 --regex --entropy=False ./
  rubocop:
    docker:
      - image: circleci/ruby:2.5.3-node-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Make service layer the base directory
          command: |
            cp -r ./service-layer/. ./
            rm -rf ./service-layer ./front-end
      - restore_cache:
          keys:
            - service-layer-dependencies-{{ checksum "Gemfile.lock" }}
      - run: bundle install --path vendor/bundle
      - run: bundle exec rubocop
      - save_cache:
          key: service-layer-dependencies-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
  rspec:
    docker:
      - image: circleci/ruby:2.5.3-node-browsers
        environment:
          PGHOST: "127.0.0.1"
          PGUSER: "sbaeli"
          RAILS_ENV: "test"
          CANVAS_NAMESPACE: "sba-eli-service"
          CANVAS_HOST: "http://example.canvas.com"
          CANVAS_URI: "http://localhost:3000/auth/canvas/callback"
          CANVAS_TOKEN: "ffffffffffffffffffffffff"
          CANVAS_ACCOUNT_ID: "1"
          CANVAS_API_URI: ""
          AWS_ACCESS_KEY_ID: "aws_access_key_id"
          AWS_SECRET_ACCESS_KEY: "aws_secret_access_key"
          AWS_REGION: "us-east-1"
          AWS_COGNITO_USER_POOL_ID: ""
          AWS_COGNITO_CLIENT_ID: ""
          DISCOURSE_HOST: "https://discourse.example.com"
          DISCOURSE_USER: "discourse_user"
          DISCOURSE_API_KEY: "discourse_api_key"
      - image: circleci/postgres:9.4
        environment:
          POSTGRES_USER: sbaeli
          POSTGRES_DB: sba-eli_test
          POSTGRES_PASSWORD: ""
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Make service layer the base directory
          command: |
            cp -r ./service-layer/. ./
            rm -rf ./service-layer ./front-end
      - restore_cache:
          keys:
            - service-layer-dependencies-{{ checksum "Gemfile.lock" }}
      - run: bundle install --path vendor/bundle
      - save_cache:
          key: service-layer-dependencies-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load
      - run: bundle exec rake db:migrate RAILS_ENV=test
      - run:
          name: rspec
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb")"
            bundle exec rspec --format progress \
                --out /tmp/test-results/rspec.xml \
                --format progress \
                $TEST_FILES

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
  eslint:
    docker:
      - image: circleci/ruby:2.5.3-node-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Make front end the base directory
          command: |
            cp -r ./front-end/. ./
            rm -rf ./service-layer ./front-end
      - restore_cache:
          keys:
            - front-end-dependencies-{{ checksum "yarn.lock" }}
      - run: yarn install
      - run: yarn eslint ./src
      - save_cache:
          key: front-end-dependencies-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
  jest:
    docker:
      - image: circleci/ruby:2.5.3-node-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Make front end the base directory
          command: |
            cp -r ./front-end/. ./
            rm -rf ./service-layer ./front-end
      - restore_cache:
          keys:
            - front-end-dependencies-{{ checksum "yarn.lock" }}
      - run: yarn install
      - run:
          name: Run Test
          command: yarn test --maxWorkers=2
          no_output_timeout: 30m
      - save_cache:
          key: front-end-dependencies-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
  build:
    docker:
      - image: circleci/python:2.7-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Setup Environment Variables
          command: |
            echo 'export TAG=$(echo $CIRCLE_SHA1 | head -c 8)' >> $BASH_ENV
            echo 'export BRANCH=$(echo $CIRCLE_BRANCH | sed -r 's/[_]+/-/g')' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Install Dependencies
          command: |
            sudo pip install awscli
      - run:
          name: Generate AWS ECR Login
          command: |
            echo "Configuring AWS..."
            aws configure set default.region $AWS_DEFAULT_REGION
            aws configure set default.output json
            login="$(aws ecr get-login --no-include-email)"
            ${login}
      - run:
          name: Build Images with Docker-Compose
          command: |
            docker-compose build
          no_output_timeout: 30m
      - run:
          name: Create Docker ECS Repo
          command: |
            DEPLOYABLE_SERVICES=$(cat docker-compose.yml | grep 'image: ' | cut -d':' -f 2 | tr -d '"')
            for SERVICE_NAME in $DEPLOYABLE_SERVICES
            do
              aws ecr create-repository --region ${AWS_DEFAULT_REGION} \
                --repository-name ${SERVICE_NAME} || true
              docker tag ${SERVICE_NAME} "${ECR_URI}/${SERVICE_NAME}:${TAG}"
              docker push "${ECR_URI}/${SERVICE_NAME}:${TAG}"
            done
  review:
    docker:
      - image: circleci/python:2.7-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install Dependencies
          command: |
            sudo pip install awscli
            sudo curl -o /usr/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest
            sudo chmod +x /usr/bin/ecs-cli
      - run:
          name: Configure AWS CLI
          command: |
            echo "Configuring AWS..."
            aws configure set default.region $AWS_DEFAULT_REGION
            aws configure set default.output json
      - run:
          name: Deploy
          command: |
            chmod +x ./config/deploy.sh
            ./config/deploy.sh
      - slack/approval:
          message: "Branch ${BRANCH} is awaiting UX review http://${BRANCH}.${DOMAIN}"
          color: "#e8f441"
          url: "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
  clean-up:
    working_directory: ~/repo
    docker:
      - image: circleci/python:2.7-stretch
    steps:
      - slack/notify:
          message: "${BRANCH} has been approved!"
          color: "#41f49d"
      - checkout
      - run:
          name: Install Dependencies
          command: |
            sudo pip install awscli
            sudo curl -o /usr/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest
            sudo chmod +x /usr/bin/ecs-cli
      - run:
          name: Tear Down Cluster
          command: |
            chmod +x config/destroy.sh
            ./config/destroy.sh
  deploy-dev:
    docker:
      - image: circleci/python:2.7-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install Dependencies
          command: |
            sudo pip install awscli
      - run:
          name: Generate AWS ECR Login
          command: |
            echo "Configuring AWS..."
            aws configure set default.region $AWS_DEFAULT_REGION
            aws configure set default.output json
            login="$(aws ecr get-login --no-include-email)"
            ${login}
      - run:
          name: Build Images with Docker-Compose
          command: |
            docker-compose build
          no_output_timeout: 30m
      - run:
          name: Tag Images
          command: |
            echo "Tagging images..."
            images=$(cat docker-compose.yml | grep 'image: ' | cut -d':' -f 2 | tr -d '"')
            git_hash=$(git rev-parse --short HEAD)
            for image in $images
            do
              aws ecr create-repository --region "${AWS_DEFAULT_REGION}" --repository "${image}" || true
              docker tag "${image}" "${image}":"${git_hash}"
              docker tag "${image}":"${git_hash}" "${ECR_URI}"/"${image}":"${git_hash}"
              docker tag "${image}" "${image}":unstable
              docker tag "${image}":unstable "${ECR_URI}"/"${image}":unstable
             done
      - run:
          name: Push Images
          command: |
            echo "Pushing images..."
            images=$(cat docker-compose.yml | grep 'image: ' | cut -d':' -f 2 | tr -d '"')
            git_hash=$(git rev-parse --short HEAD)
            for image in $images
            do
              docker push "${ECR_URI}"/"${image}":"${git_hash}"
              docker push "${ECR_URI}"/"${image}":unstable
            done
      - run:
          name: Install ECS-Deploy
          command: |
            pip install ecs-deploy --user
      # - run:
      #     name: Run Database Migration
      #     command: |
      #       /home/circleci/.local/bin/ecs run $ECS_CLUSTER $BACKEND_TASK -c $BACKEND_CONTAINER "bin/rails db:migrate RAILS_ENV=development"
      - run:
          name: Deploy Service Layer
          command: |
            /home/circleci/.local/bin/ecs deploy $ECS_CLUSTER $BACKEND_SERVICE --timeout 600
      - run:
          name: Deploy Front End
          command: |
            /home/circleci/.local/bin/ecs deploy $ECS_CLUSTER $FRONTEND_SERVICE --timeout 600
workflows:
  version: 2
  test_build_review:
    jobs:
      - check_for_secrets
      - rubocop
      - rspec
      - eslint
      - jest
      - build:
          requires:
            - check_for_secrets
            - rubocop
            - rspec
            - eslint
            - jest
      - review:
          requires:
            - check_for_secrets
            - rubocop
            - rspec
            - eslint
            - jest
            - build
      - review-approval:
          type: approval
          requires:
            - check_for_secrets
            - rubocop
            - rspec
            - eslint
            - jest
            - build
            - review
      - clean-up:
          requires:
            - check_for_secrets
            - rubocop
            - rspec
            - eslint
            - jest
            - build
            - review
            - review-approval
  build_deploy:
    jobs:
      - deploy-dev:
          filters:
            branches:
              only: master
